use std::f64::consts::PI;

use num::{Float, ToPrimitive, Unsigned};

/// computes the kth zero of the $J_0(x)$ Bessel function.
///
/// # Notes
///
/// Note that the first 20 zeros are tabulated.  After that, they are computed
fn besseljzero<F: Float, U: Unsigned + ToPrimitive>(k: U) -> F {
    const jz: [f64; 20] = [
        2.40482555769577276862163187933E+00,
        5.52007811028631064959660411281E+00,
        8.65372791291101221695419871266E+00,
        11.7915344390142816137430449119E+00,
        14.9309177084877859477625939974E+00,
        18.0710639679109225431478829756E+00,
        21.2116366298792589590783933505E+00,
        24.3524715307493027370579447632E+00,
        27.4934791320402547958772882346E+00,
        30.6346064684319751175495789269E+00,
        33.7758202135735686842385463467E+00,
        36.9170983536640439797694930633E+00,
        40.0584257646282392947993073740E+00,
        43.1997917131767303575240727287E+00,
        46.3411883716618140186857888791E+00,
        49.4826098973978171736027615332E+00,
        52.6240518411149960292512853804E+00,
        55.7655107550199793116834927735E+00,
        58.9069839260809421328344066346E+00,
        62.0484691902271698828525002646E+00,
    ];

    let r: f64;
    let mut r2: f64;
    let mut z: f64;

    let mut tmp: f64;

    if jz.len() > 20 {
        z = PI * (k.to_f64().unwrap() - 0.25E+00);
        r = 1.0E+00 / z;
        r2 = r * r;

        tmp = r2 * 0.509225462402226769498681286758E+08;
        tmp += -0.849353580299148769921876983660E+06;
        tmp *= r2;
        tmp += 0.186904765282320653831636345064E+05;
        tmp *= r2;
        tmp += -0.567644412135183381139802038240E+03;
        tmp *= r2;
        tmp += 0.253364147973439050099206349206E+02;
        tmp *= r2;
        tmp += -0.182443876720610119047619047619E+01;
        tmp *= r2;
        tmp += 0.246028645833333333333333333333E+00;
        tmp *= r2;
        tmp += 0.125E+00;
        tmp *= r;
        z += tmp;
    } else {
        z = jz[k.to_usize().unwrap() - 1];
    }

    F::from(0.0).unwrap()
}
